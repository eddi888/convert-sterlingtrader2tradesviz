name: Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
            artifact_name: mutate
            asset_name: mutate-linux-amd64
          - os: windows-latest
            platform: windows
            target: x86_64-pc-windows-msvc
            artifact_name: mutate.exe
            asset_name: mutate-windows-amd64.exe
          - os: macos-latest
            platform: macos
            target: x86_64-apple-darwin
            artifact_name: mutate
            asset_name: mutate-macos-amd64
          - os: ubuntu-latest
            platform: freebsd
            target: x86_64-unknown-freebsd
            artifact_name: mutate
            asset_name: mutate-freebsd-amd64
            cross: true

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Set up Docker
        if: matrix.cross
        uses: docker/setup-buildx-action@v1

      - name: Install cross
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build Release (non-Windows)
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Build Release (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare asset (non-Windows)
        if: matrix.platform != 'windows'
        shell: bash
        run: |
          mkdir -p release
          cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "release/"
          chmod +x "release/${{ matrix.artifact_name }}"

      - name: Prepare asset (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release
          Copy-Item "target\${{ matrix.target }}\release\${{ matrix.artifact_name }}" -Destination "release\"

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
